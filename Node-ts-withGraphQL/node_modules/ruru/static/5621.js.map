{"version":3,"file":"5621.js","mappings":"oKAKA,MAAMA,EAAY,GACX,SAASC,EAAkBC,EAAIC,EAAkBC,GAC9CD,aAA4B,MAC9BA,EAAmB,IAAI,IAAeA,EAAkB,GAAIE,QAAQD,KAExEJ,EAAUM,KAAK,CAACJ,EAAIC,GACxB,CACO,SAASI,IACZ,OAAOP,CACX,C,6FCVO,MAAMQ,EACT,WAAAC,GACIC,KAAKC,gBAAkB,IAAIC,GAC/B,CACA,2BAAAC,CAA4BC,GACxB,GAAKA,GAAQJ,KAAKC,gBAAgBI,IAAID,GAAQ,CAC1C,MAAME,EAAYN,KAAKC,gBAAgBM,IAAIH,GAE3C,OADAJ,KAAKC,gBAAgBO,OAAOJ,GACrBE,CACX,CAEJ,EAEG,MAAMG,EACT,WAAAV,CAAYW,GACRV,KAAKU,WAAaA,CACtB,E,kBCfG,IAAIC,E,oCACX,SAAWA,GACPA,EAAMC,WAAa,IAAIV,IACvBS,EAAME,UAAY,aAClBF,EAAMG,gBAAkB,mBAIxBH,EAAMI,uBAHN,SAAgCC,GAC5B,OAAOA,EAAKL,EAAMG,kBAAoB,EAC1C,CAEH,CARD,CAQGH,IAAUA,EAAQ,CAAC,IACf,MAAMM,EAAwBC,EAAgB,wBAa9C,SAASA,EAAgBC,GAC5B,GAAIR,EAAMC,WAAWP,IAAIc,GACrB,OAAOR,EAAMC,WAAWL,IAAIY,GAEhC,MAAM3B,EAAK,SAAU4B,EAAQC,EAAKC,GAC9B,GAAyB,IAArBC,UAAUC,OACV,MAAM,IAAIC,MAAM,qEAlB5B,SAAgCjC,EAAI4B,EAAQE,GACpCF,EAAOT,EAAME,aAAeO,EAC5BA,EAAOT,EAAMG,iBAAiBlB,KAAK,CAAEJ,KAAI8B,WAGzCF,EAAOT,EAAMG,iBAAmB,CAAC,CAAEtB,KAAI8B,UACvCF,EAAOT,EAAME,WAAaO,EAElC,CAYQM,CAAuBlC,EAAI4B,EAAQE,EACvC,EAGA,OAFA9B,EAAGmC,SAAW,IAAMR,EACpBR,EAAMC,WAAWgB,IAAIT,EAAW3B,GACzBA,CACX,C,mCCrCO,MAAMqC,EACT,WAAA9B,CAAYiB,EAAMc,EAAkB,GAAIpC,GAA+B,GACnEM,KAAKgB,KAAOA,EACZhB,KAAK8B,gBAAkBA,EACvB9B,KAAKN,6BAA+BA,CACxC,E,kGCFG,MAAMqC,GAAuB,QAAgB,wBACpD,OAAkBA,EAAsB,EAAAjC,oBAAqB,E","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/instantiation/common/extensions.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDnd.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/instantiation/common/descriptors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDndService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SyncDescriptor } from './descriptors.js';\nconst _registry = [];\nexport function registerSingleton(id, ctorOrDescriptor, supportsDelayedInstantiation) {\n    if (!(ctorOrDescriptor instanceof SyncDescriptor)) {\n        ctorOrDescriptor = new SyncDescriptor(ctorOrDescriptor, [], Boolean(supportsDelayedInstantiation));\n    }\n    _registry.push([id, ctorOrDescriptor]);\n}\nexport function getSingletonServiceDescriptors() {\n    return _registry;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeViewsDnDService {\n    constructor() {\n        this._dragOperations = new Map();\n    }\n    removeDragOperationTransfer(uuid) {\n        if ((uuid && this._dragOperations.has(uuid))) {\n            const operation = this._dragOperations.get(uuid);\n            this._dragOperations.delete(uuid);\n            return operation;\n        }\n        return undefined;\n    }\n}\nexport class DraggedTreeItemsIdentifier {\n    constructor(identifier) {\n        this.identifier = identifier;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class SyncDescriptor {\n    constructor(ctor, staticArguments = [], supportsDelayedInstantiation = false) {\n        this.ctor = ctor;\n        this.staticArguments = staticArguments;\n        this.supportsDelayedInstantiation = supportsDelayedInstantiation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { TreeViewsDnDService } from './treeViewsDnd.js';\nexport const ITreeViewsDnDService = createDecorator('treeViewsDndService');\nregisterSingleton(ITreeViewsDnDService, TreeViewsDnDService, 1 /* InstantiationType.Delayed */);\n"],"names":["_registry","registerSingleton","id","ctorOrDescriptor","supportsDelayedInstantiation","Boolean","push","getSingletonServiceDescriptors","TreeViewsDnDService","constructor","this","_dragOperations","Map","removeDragOperationTransfer","uuid","has","operation","get","delete","DraggedTreeItemsIdentifier","identifier","_util","serviceIds","DI_TARGET","DI_DEPENDENCIES","getServiceDependencies","ctor","IInstantiationService","createDecorator","serviceId","target","key","index","arguments","length","Error","storeServiceDependency","toString","set","SyncDescriptor","staticArguments","ITreeViewsDnDService"],"sourceRoot":""}