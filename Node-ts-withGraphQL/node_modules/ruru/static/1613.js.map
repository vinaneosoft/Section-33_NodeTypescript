{"version":3,"file":"1613.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/resources.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiation.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/mime.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/extpath.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as extpath from './extpath.js';\nimport { Schemas } from './network.js';\nimport * as paths from './path.js';\nimport { isLinux, isWindows } from './platform.js';\nimport { compare as strCompare, equalsIgnoreCase } from './strings.js';\nimport { URI, uriToFsPath } from './uri.js';\nexport function originalFSPath(uri) {\n    return uriToFsPath(uri, true);\n}\nexport class ExtUri {\n    constructor(_ignorePathCasing) {\n        this._ignorePathCasing = _ignorePathCasing;\n    }\n    compare(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return 0;\n        }\n        return strCompare(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));\n    }\n    isEqual(uri1, uri2, ignoreFragment = false) {\n        if (uri1 === uri2) {\n            return true;\n        }\n        if (!uri1 || !uri2) {\n            return false;\n        }\n        return this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);\n    }\n    getComparisonKey(uri, ignoreFragment = false) {\n        return uri.with({\n            path: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,\n            fragment: ignoreFragment ? null : undefined\n        }).toString();\n    }\n    isEqualOrParent(base, parentCandidate, ignoreFragment = false) {\n        if (base.scheme === parentCandidate.scheme) {\n            if (base.scheme === Schemas.file) {\n                return extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n            if (isEqualAuthority(base.authority, parentCandidate.authority)) {\n                return extpath.isEqualOrParent(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n            }\n        }\n        return false;\n    }\n    // --- path math\n    joinPath(resource, ...pathFragment) {\n        return URI.joinPath(resource, ...pathFragment);\n    }\n    basenameOrAuthority(resource) {\n        return basename(resource) || resource.authority;\n    }\n    basename(resource) {\n        return paths.posix.basename(resource.path);\n    }\n    extname(resource) {\n        return paths.posix.extname(resource.path);\n    }\n    dirname(resource) {\n        if (resource.path.length === 0) {\n            return resource;\n        }\n        let dirname;\n        if (resource.scheme === Schemas.file) {\n            dirname = URI.file(paths.dirname(originalFSPath(resource))).path;\n        }\n        else {\n            dirname = paths.posix.dirname(resource.path);\n            if (resource.authority && dirname.length && dirname.charCodeAt(0) !== 47 /* CharCode.Slash */) {\n                console.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n                dirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n            }\n        }\n        return resource.with({\n            path: dirname\n        });\n    }\n    normalizePath(resource) {\n        if (!resource.path.length) {\n            return resource;\n        }\n        let normalizedPath;\n        if (resource.scheme === Schemas.file) {\n            normalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n        }\n        else {\n            normalizedPath = paths.posix.normalize(resource.path);\n        }\n        return resource.with({\n            path: normalizedPath\n        });\n    }\n    relativePath(from, to) {\n        if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n            return undefined;\n        }\n        if (from.scheme === Schemas.file) {\n            const relativePath = paths.relative(originalFSPath(from), originalFSPath(to));\n            return isWindows ? extpath.toSlashes(relativePath) : relativePath;\n        }\n        let fromPath = from.path || '/';\n        const toPath = to.path || '/';\n        if (this._ignorePathCasing(from)) {\n            // make casing of fromPath match toPath\n            let i = 0;\n            for (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n                if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n                    if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n                        break;\n                    }\n                }\n            }\n            fromPath = toPath.substr(0, i) + fromPath.substr(i);\n        }\n        return paths.posix.relative(fromPath, toPath);\n    }\n    resolvePath(base, path) {\n        if (base.scheme === Schemas.file) {\n            const newURI = URI.file(paths.resolve(originalFSPath(base), path));\n            return base.with({\n                authority: newURI.authority,\n                path: newURI.path\n            });\n        }\n        path = extpath.toPosixPath(path); // we allow path to be a windows path\n        return base.with({\n            path: paths.posix.resolve(base.path, path)\n        });\n    }\n    // --- misc\n    isAbsolutePath(resource) {\n        return !!resource.path && resource.path[0] === '/';\n    }\n    isEqualAuthority(a1, a2) {\n        return a1 === a2 || (a1 !== undefined && a2 !== undefined && equalsIgnoreCase(a1, a2));\n    }\n    hasTrailingPathSeparator(resource, sep = paths.sep) {\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            return fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === sep;\n        }\n        else {\n            const p = resource.path;\n            return (p.length > 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */) && !(/^[a-zA-Z]:(\\/$|\\\\$)/.test(resource.fsPath)); // ignore the slash at offset 0\n        }\n    }\n    removeTrailingPathSeparator(resource, sep = paths.sep) {\n        // Make sure that the path isn't a drive letter. A trailing separator there is not removable.\n        if (hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n        }\n        return resource;\n    }\n    addTrailingPathSeparator(resource, sep = paths.sep) {\n        let isRootSep = false;\n        if (resource.scheme === Schemas.file) {\n            const fsp = originalFSPath(resource);\n            isRootSep = ((fsp !== undefined) && (fsp.length === extpath.getRoot(fsp).length) && (fsp[fsp.length - 1] === sep));\n        }\n        else {\n            sep = '/';\n            const p = resource.path;\n            isRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === 47 /* CharCode.Slash */;\n        }\n        if (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {\n            return resource.with({ path: resource.path + '/' });\n        }\n        return resource;\n    }\n}\n/**\n * Unbiased utility that takes uris \"as they are\". This means it can be interchanged with\n * uri#toString() usages. The following is true\n * ```\n * assertEqual(aUri.toString() === bUri.toString(), exturi.isEqual(aUri, bUri))\n * ```\n */\nexport const extUri = new ExtUri(() => false);\n/**\n * BIASED utility that _mostly_ ignored the case of urs paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriBiasedIgnorePathCase = new ExtUri(uri => {\n    // A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n    // Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n    return uri.scheme === Schemas.file ? !isLinux : true;\n});\n/**\n * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriIgnorePathCase = new ExtUri(_ => true);\nexport const isEqual = extUri.isEqual.bind(extUri);\nexport const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);\nexport const getComparisonKey = extUri.getComparisonKey.bind(extUri);\nexport const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);\nexport const basename = extUri.basename.bind(extUri);\nexport const extname = extUri.extname.bind(extUri);\nexport const dirname = extUri.dirname.bind(extUri);\nexport const joinPath = extUri.joinPath.bind(extUri);\nexport const normalizePath = extUri.normalizePath.bind(extUri);\nexport const relativePath = extUri.relativePath.bind(extUri);\nexport const resolvePath = extUri.resolvePath.bind(extUri);\nexport const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);\nexport const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);\nexport const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);\nexport const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);\nexport const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);\n/**\n * Data URI related helpers.\n */\nexport var DataUri;\n(function (DataUri) {\n    DataUri.META_DATA_LABEL = 'label';\n    DataUri.META_DATA_DESCRIPTION = 'description';\n    DataUri.META_DATA_SIZE = 'size';\n    DataUri.META_DATA_MIME = 'mime';\n    function parseMetaData(dataUri) {\n        const metadata = new Map();\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n        const meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n        meta.split(';').forEach(property => {\n            const [key, value] = property.split(':');\n            if (key && value) {\n                metadata.set(key, value);\n            }\n        });\n        // Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n        // the mime is: image/png\n        const mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n        if (mime) {\n            metadata.set(DataUri.META_DATA_MIME, mime);\n        }\n        return metadata;\n    }\n    DataUri.parseMetaData = parseMetaData;\n})(DataUri || (DataUri = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport * as platform from '../../registry/common/platform.js';\nexport const Extensions = {\n    JSONContribution: 'base.contributions.json'\n};\nfunction normalizeId(id) {\n    if (id.length > 0 && id.charAt(id.length - 1) === '#') {\n        return id.substring(0, id.length - 1);\n    }\n    return id;\n}\nclass JSONContributionRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.schemasById = {};\n    }\n    registerSchema(uri, unresolvedSchemaContent) {\n        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n        this._onDidChangeSchema.fire(uri);\n    }\n    notifySchemaChanged(uri) {\n        this._onDidChangeSchema.fire(uri);\n    }\n}\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.registeredConfigurationDefaults = [];\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = {\n            properties: {},\n            patternProperties: {},\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = new Set();\n        this.doRegisterConfigurations(configurations, validate, properties);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        const properties = new Set();\n        this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n        this.registeredConfigurationDefaults.push(...configurationDefaults);\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                bucket.add(key);\n                const configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key)\n                    ?? this.configurationDefaultsOverrides.set(key, { configurationDefaultOverrides: [] }).get(key);\n                const value = overrides[key];\n                configurationDefaultOverridesForKey.configurationDefaultOverrides.push({ value, source });\n                // Configuration defaults for Override Identifiers\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    this.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                }\n                // Configuration defaults for Configuration Properties\n                else {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n    updateDefaultOverrideProperty(key, newDefaultOverride, source) {\n        const property = {\n            type: 'object',\n            default: newDefaultOverride.value,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: newDefaultOverride.value,\n            source,\n            defaultValueSource: source\n        };\n        this.configurationProperties[key] = property;\n        this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n    }\n    mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier, configurationValueObject, valueSource, existingDefaultOverride) {\n        const defaultValue = existingDefaultOverride?.value || {};\n        const source = existingDefaultOverride?.source ?? new Map();\n        // This should not happen\n        if (!(source instanceof Map)) {\n            console.error('objectConfigurationSources is not a Map');\n            return undefined;\n        }\n        for (const propertyKey of Object.keys(configurationValueObject)) {\n            const propertyDefaultValue = configurationValueObject[propertyKey];\n            const isObjectSetting = types.isObject(propertyDefaultValue) &&\n                (types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n            // If the default value is an object, merge the objects and store the source of each keys\n            if (isObjectSetting) {\n                defaultValue[propertyKey] = { ...(defaultValue[propertyKey] ?? {}), ...propertyDefaultValue };\n                // Track the source of each value in the object\n                if (valueSource) {\n                    for (const objectKey in propertyDefaultValue) {\n                        source.set(`${propertyKey}.${objectKey}`, valueSource);\n                    }\n                }\n            }\n            // Primitive values are overridden\n            else {\n                defaultValue[propertyKey] = propertyDefaultValue;\n                if (valueSource) {\n                    source.set(propertyKey, valueSource);\n                }\n                else {\n                    source.delete(propertyKey);\n                }\n            }\n        }\n        return { value: defaultValue, source };\n    }\n    mergeDefaultConfigurationsForConfigurationProperty(propertyKey, value, valuesSource, existingDefaultOverride) {\n        const property = this.configurationProperties[propertyKey];\n        const existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;\n        let source = valuesSource;\n        const isObjectSetting = types.isObject(value) &&\n            (property !== undefined && property.type === 'object' ||\n                property === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue)));\n        // If the default value is an object, merge the objects and store the source of each keys\n        if (isObjectSetting) {\n            source = existingDefaultOverride?.source ?? new Map();\n            // This should not happen\n            if (!(source instanceof Map)) {\n                console.error('defaultValueSource is not a Map');\n                return undefined;\n            }\n            for (const objectKey in value) {\n                if (valuesSource) {\n                    source.set(`${propertyKey}.${objectKey}`, valuesSource);\n                }\n            }\n            value = { ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}), ...value };\n        }\n        return { value, source };\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n    }\n    doRegisterOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate, bucket) {\n        configurations.forEach(configuration => {\n            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */, bucket) {\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if (properties[key].policy?.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                bucket.add(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n            }\n        }\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes?.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key)?.configurationDefaultOverrideValue;\n        let defaultValue = undefined;\n        let defaultSource = undefined;\n        if (configurationdefaultOverride\n            && (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n        ) {\n            defaultValue = configurationdefaultOverride.value;\n            defaultSource = configurationdefaultOverride.source;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches?.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n    }\n    return null;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Assert from '../../../base/common/assert.js';\nimport * as Types from '../../../base/common/types.js';\nclass RegistryImpl {\n    constructor() {\n        this.data = new Map();\n    }\n    add(id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.has(id), 'There is already an extension with this id');\n        this.data.set(id, data);\n    }\n    as(id) {\n        return this.data.get(id) || null;\n    }\n}\nexport const Registry = new RegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n(function (_util) {\n    _util.serviceIds = new Map();\n    _util.DI_TARGET = '$di$target';\n    _util.DI_DEPENDENCIES = '$di$dependencies';\n    function getServiceDependencies(ctor) {\n        return ctor[_util.DI_DEPENDENCIES] || [];\n    }\n    _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\nexport const IInstantiationService = createDecorator('instantiationService');\nfunction storeServiceDependency(id, target, index) {\n    if (target[_util.DI_TARGET] === target) {\n        target[_util.DI_DEPENDENCIES].push({ id, index });\n    }\n    else {\n        target[_util.DI_DEPENDENCIES] = [{ id, index }];\n        target[_util.DI_TARGET] = target;\n    }\n}\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator(serviceId) {\n    if (_util.serviceIds.has(serviceId)) {\n        return _util.serviceIds.get(serviceId);\n    }\n    const id = function (target, key, index) {\n        if (arguments.length !== 3) {\n            throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n        }\n        storeServiceDependency(id, target, index);\n    };\n    id.toString = () => serviceId;\n    _util.serviceIds.set(serviceId, id);\n    return id;\n}\n","export const Mimes = Object.freeze({\n    text: 'text/plain',\n    binary: 'application/octet-stream',\n    unknown: 'application/unknown',\n    markdown: 'text/markdown',\n    latex: 'text/latex',\n    uriList: 'text/uri-list',\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (const key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                if (obj === null) {\n                    conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is null`);\n                    return;\n                }\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n    return settingKey.replace(/[\\[\\]]/g, '');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { posix, sep } from './path.js';\nimport { isWindows } from './platform.js';\nimport { startsWithIgnoreCase } from './strings.js';\nexport function isPathSeparator(code) {\n    return code === 47 /* CharCode.Slash */ || code === 92 /* CharCode.Backslash */;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, posix.sep);\n}\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath) {\n    if (osPath.indexOf('/') === -1) {\n        osPath = toSlashes(osPath);\n    }\n    if (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n        osPath = '/' + osPath;\n    }\n    return osPath;\n}\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path, sep = posix.sep) {\n    if (!path) {\n        return '';\n    }\n    const len = path.length;\n    const firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                let pos = 3;\n                const start = pos;\n                for (; pos < len; pos++) {\n                    if (isPathSeparator(path.charCodeAt(pos))) {\n                        break;\n                    }\n                }\n                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n                    pos += 1;\n                    for (; pos < len; pos++) {\n                        if (isPathSeparator(path.charCodeAt(pos))) {\n                            return path.slice(0, pos + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    let pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\n/**\n * @deprecated please use `IUriIdentityService.extUri.isEqualOrParent` instead. If\n * you are in a context without services, consider to pass down the `extUri` from the\n * outside, or use `extUriBiasedIgnorePathCase` if you know what you are doing.\n */\nexport function isEqualOrParent(base, parentCandidate, ignoreCase, separator = sep) {\n    if (base === parentCandidate) {\n        return true;\n    }\n    if (!base || !parentCandidate) {\n        return false;\n    }\n    if (parentCandidate.length > base.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        const beginsWith = startsWithIgnoreCase(base, parentCandidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (parentCandidate.length === base.length) {\n            return true; // same path, different casing\n        }\n        let sepOffset = parentCandidate.length;\n        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return base.charAt(sepOffset) === separator;\n    }\n    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n        parentCandidate += separator;\n    }\n    return base.indexOf(parentCandidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n    return char0 >= 65 /* CharCode.A */ && char0 <= 90 /* CharCode.Z */ || char0 >= 97 /* CharCode.a */ && char0 <= 122 /* CharCode.z */;\n}\nexport function hasDriveLetter(path, isWindowsOS = isWindows) {\n    if (isWindowsOS) {\n        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === 58 /* CharCode.Colon */;\n    }\n    return false;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n"],"names":["originalFSPath","uri","ExtUri","constructor","_ignorePathCasing","this","compare","uri1","uri2","ignoreFragment","getComparisonKey","isEqual","with","path","toLowerCase","undefined","fragment","toString","isEqualOrParent","base","parentCandidate","scheme","file","query","isEqualAuthority","authority","joinPath","resource","pathFragment","basenameOrAuthority","basename","extname","dirname","length","charCodeAt","console","error","normalizePath","normalizedPath","normalize","relativePath","from","to","fromPath","toPath","i","len","Math","min","charAt","substr","relative","resolvePath","newURI","resolve","isAbsolutePath","a1","a2","hasTrailingPathSeparator","sep","fsp","p","test","fsPath","removeTrailingPathSeparator","addTrailingPathSeparator","isRootSep","extUri","_","bind","DataUri","META_DATA_LABEL","META_DATA_DESCRIPTION","META_DATA_SIZE","META_DATA_MIME","parseMetaData","dataUri","metadata","Map","substring","indexOf","lastIndexOf","split","forEach","property","key","value","set","mime","Extensions","JSONContribution","jsonContributionRegistry","_onDidChangeSchema","schemasById","registerSchema","unresolvedSchemaContent","id","fire","notifySchemaChanged","add","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","OVERRIDE_PROPERTY_PATTERN","OVERRIDE_PROPERTY_REGEX","overrideIdentifiersFromKey","identifiers","matches","exec","identifier","trim","push","configurationRegistry","registeredConfigurationDefaults","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","defaultLanguageConfigurationOverridesNode","title","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","allowTrailingCommas","allowComments","configurationProperties","policyConfigurations","excludedConfigurationProperties","registerOverridePropertyPatternKey","registerConfiguration","configuration","validate","registerConfigurations","configurations","doRegisterConfigurations","registerDefaultConfigurations","configurationDefaults","doRegisterDefaultConfigurations","defaultsOverrides","bucket","overrides","source","configurationDefaultOverridesForKey","get","configurationDefaultOverrides","newDefaultOverride","mergeDefaultConfigurationsForOverrideIdentifier","configurationDefaultOverrideValue","updateDefaultOverrideProperty","mergeDefaultConfigurationsForConfigurationProperty","updatePropertyDefaultValue","updateSchema","doRegisterOverrideIdentifiers","type","default","description","$ref","defaultDefaultValue","defaultValueSource","overrideIdentifier","configurationValueObject","valueSource","existingDefaultOverride","defaultValue","propertyKey","Object","keys","propertyDefaultValue","objectKey","delete","valuesSource","existingDefaultValue","registerOverrideIdentifiers","updateOverridePropertyPatternKey","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","validateProperty","restricted","includes","hasOwnProperty","included","policy","name","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","getPolicyConfigurations","register","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","errorMessage","configurationdefaultOverride","defaultSource","disallowConfigurationDefault","Array","isArray","getDefaultValue","schema","Registry","data","has","_util","serviceIds","DI_TARGET","DI_DEPENDENCIES","getServiceDependencies","ctor","IInstantiationService","createDecorator","serviceId","target","index","arguments","Error","storeServiceDependency","Mimes","freeze","text","binary","unknown","markdown","latex","uriList","IConfigurationService","toValuesTree","conflictReporter","root","create","addToValueTree","settingsTreeRoot","segments","last","pop","curr","s","obj","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","getConfigurationValue","config","settingPath","result","current","component","accessSetting","getLanguageTagSettingPlainKey","settingKey","replace","isPathSeparator","code","toSlashes","osPath","toPosixPath","getRoot","firstLetter","pos","start","isWindowsDriveLetter","ignoreCase","separator","sepOffset","char0","hasDriveLetter","isWindowsOS","ModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","registerLanguage","def","dispose","splice","getLanguages","PLAINTEXT_LANGUAGE_ID","extensions","aliases","mimetypes"],"sourceRoot":""}