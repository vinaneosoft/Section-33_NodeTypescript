{"version":3,"file":"1422.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/core/editorColorRegistry.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/baseColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/minimapColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/inputColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/chartsColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/listColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/menuColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/quickpickColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/searchColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport * as nls from '../../../nls.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\nexport function isColorDefaults(value) {\n    return value !== null && typeof value === 'object' && 'light' in value && 'dark' in value;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nexport const DEFAULT_COLOR_CONFIG_VALUE = 'default';\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (needsTransparency) {\n            propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';\n            propertySchema.patternErrorMessage = nls.localize('transparecyRequired', 'This color must be transparent or it will obscure content');\n        }\n        this.colorSchema.properties[id] = {\n            description,\n            oneOf: [\n                propertySchema,\n                { type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('useDefault', 'Use the default color.') }\n            ]\n        };\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc?.defaults) {\n            const colorValue = isColorDefaults(colorDesc.defaults) ? colorDesc.defaults[theme.type] : colorDesc.defaults;\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return resolveColorValue(transform.value, theme)?.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return resolveColorValue(transform.value, theme)?.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return resolveColorValue(transform.value, theme)?.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return resolveColorValue(transform.value, theme)?.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nexport function lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { activeContrastBorder, editorBackground, registerColor, editorWarningForeground, editorInfoForeground, editorWarningBorder, editorInfoBorder, contrastBorder, editorFindMatchHighlight, editorWarningBackground } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\n/**\n * Definition of the editor colors\n */\nexport const editorLineHighlight = registerColor('editor.lineHighlightBackground', null, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexport const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexport const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'));\nexport const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'));\nexport const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));\nexport const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorMultiCursorPrimaryForeground = registerColor('editorMultiCursor.primary.foreground', editorCursorForeground, nls.localize('editorMultiCursorPrimaryForeground', 'Color of the primary editor cursor when multiple cursors are present.'));\nexport const editorMultiCursorPrimaryBackground = registerColor('editorMultiCursor.primary.background', editorCursorBackground, nls.localize('editorMultiCursorPrimaryBackground', 'The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorMultiCursorSecondaryForeground = registerColor('editorMultiCursor.secondary.foreground', editorCursorForeground, nls.localize('editorMultiCursorSecondaryForeground', 'Color of secondary editor cursors when multiple cursors are present.'));\nexport const editorMultiCursorSecondaryBackground = registerColor('editorMultiCursor.secondary.background', editorCursorBackground, nls.localize('editorMultiCursorSecondaryBackground', 'The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexport const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\nexport const deprecatedEditorIndentGuides = registerColor('editorIndentGuide.background', editorWhitespaces, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('deprecatedEditorIndentGuides', '\\'editorIndentGuide.background\\' is deprecated. Use \\'editorIndentGuide.background1\\' instead.'));\nexport const deprecatedEditorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', editorWhitespaces, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('deprecatedEditorActiveIndentGuide', '\\'editorIndentGuide.activeBackground\\' is deprecated. Use \\'editorIndentGuide.activeBackground1\\' instead.'));\nexport const editorIndentGuide1 = registerColor('editorIndentGuide.background1', deprecatedEditorIndentGuides, nls.localize('editorIndentGuides1', 'Color of the editor indentation guides (1).'));\nexport const editorIndentGuide2 = registerColor('editorIndentGuide.background2', '#00000000', nls.localize('editorIndentGuides2', 'Color of the editor indentation guides (2).'));\nexport const editorIndentGuide3 = registerColor('editorIndentGuide.background3', '#00000000', nls.localize('editorIndentGuides3', 'Color of the editor indentation guides (3).'));\nexport const editorIndentGuide4 = registerColor('editorIndentGuide.background4', '#00000000', nls.localize('editorIndentGuides4', 'Color of the editor indentation guides (4).'));\nexport const editorIndentGuide5 = registerColor('editorIndentGuide.background5', '#00000000', nls.localize('editorIndentGuides5', 'Color of the editor indentation guides (5).'));\nexport const editorIndentGuide6 = registerColor('editorIndentGuide.background6', '#00000000', nls.localize('editorIndentGuides6', 'Color of the editor indentation guides (6).'));\nexport const editorActiveIndentGuide1 = registerColor('editorIndentGuide.activeBackground1', deprecatedEditorActiveIndentGuides, nls.localize('editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));\nexport const editorActiveIndentGuide2 = registerColor('editorIndentGuide.activeBackground2', '#00000000', nls.localize('editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));\nexport const editorActiveIndentGuide3 = registerColor('editorIndentGuide.activeBackground3', '#00000000', nls.localize('editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));\nexport const editorActiveIndentGuide4 = registerColor('editorIndentGuide.activeBackground4', '#00000000', nls.localize('editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));\nexport const editorActiveIndentGuide5 = registerColor('editorIndentGuide.activeBackground5', '#00000000', nls.localize('editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));\nexport const editorActiveIndentGuide6 = registerColor('editorIndentGuide.activeBackground6', '#00000000', nls.localize('editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));\nconst deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexport const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', deprecatedEditorActiveLineNumber, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\nexport const editorDimmedLineNumber = registerColor('editorLineNumber.dimmedForeground', null, nls.localize('editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));\nexport const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));\nexport const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));\nexport const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexport const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\nexport const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\nexport const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));\nexport const editorGutter = registerColor('editorGutter.background', editorBackground, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\nexport const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexport const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\nexport const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));\nexport const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));\nexport const ghostTextBackground = registerColor('editorGhostText.background', null, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));\nconst rulerRangeDefault = new Color(new RGBA(0, 122, 204, 0.6));\nexport const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', rulerRangeDefault, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexport const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexport const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));\nexport const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', '#00000000', nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', '#00000000', nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', '#00000000', nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: 'new Color(new RGBA(255, 50, 50, 1))', hcLight: '#B5200D' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));\nexport const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', '#00000000', nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', '#00000000', nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', '#00000000', nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', '#00000000', nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', '#00000000', nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', '#00000000', nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', '#00000000', nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', '#00000000', nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', '#00000000', nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', '#00000000', nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', '#00000000', nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', '#00000000', nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', editorWarningForeground, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));\nexport const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', editorWarningBackground, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));\n// contains all color rules that used to defined in editor/browser/widget/editor.css\nregisterThemingParticipant((theme, collector) => {\n    const background = theme.getColor(editorBackground);\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    const imeBackground = (lineHighlight && !lineHighlight.isTransparent() ? lineHighlight : background);\n    if (imeBackground) {\n        collector.addRule(`.monaco-editor .inputarea.ime-input { background-color: ${imeBackground}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', null, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text link\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\n// ------ text preformat\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', \"Background color for preformatted text segments.\"));\n// ------ text block quote\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\n// ------ text code block\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', editorBackground, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', scrollbarShadow, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', foreground, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', null, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport const editorErrorBackground = registerColor('editorError.background', null, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', null, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', null, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchForeground = registerColor('editor.findMatchForeground', null, nls.localize('editorFindMatchForeground', \"Text color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground', null, nls.localize('findMatchHighlightForeground', \"Foreground color of the other search matches.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', editorWidgetBackground, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', editorWidgetForeground, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', editorWidgetBorder, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', editorLightBulbForeground, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', null, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', null, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', null, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', null, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', null, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', null, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', 'sideBar.background', nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', 'foreground', nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', transparent(foreground, 0.8), nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', editorBackground, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', editorWidgetBackground, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', transparent(mergeCurrentHeaderBackground, contentTransparency), nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', transparent(mergeIncomingHeaderBackground, contentTransparency), nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', transparent(mergeCommonHeaderBackground, contentTransparency), nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', '#A0A0A0CC', nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', editorErrorForeground, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', editorWarningForeground, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', editorInfoForeground, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { editorInfoForeground, editorWarningForeground, editorWarningBorder, editorInfoBorder } from './editorColors.js';\nimport { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground } from './miscColors.js';\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapBackground = registerColor('minimap.background', null, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', Color.fromHex('#000f'), nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', transparent(scrollbarSliderBackground, 0.5), nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', transparent(scrollbarSliderHoverBackground, 0.5), nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', transparent(scrollbarSliderActiveBackground, 0.5), nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ radio\nexport const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\nexport const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', \"Background color of active radio option.\"));\nexport const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport const chartsForeground = registerColor('charts.foreground', foreground, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', transparent(foreground, .5), nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', editorErrorForeground, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', editorInfoForeground, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', editorWarningForeground, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', minimapFindMatch, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';\nexport const listFocusBackground = registerColor('list.focusBackground', null, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', null, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', null, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', null, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', null, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', null, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', null, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', null, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', null, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', widgetShadow, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n// ------ tree\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', transparent(treeIndentGuidesStroke, 0.4), nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n// ------ table\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n// ------ action list\nexport const editorActionListBackground = registerColor('editorActionList.background', editorWidgetBackground, nls.localize('editorActionListBackground', \"Action List background color.\"));\nexport const editorActionListForeground = registerColor('editorActionList.foreground', editorWidgetForeground, nls.localize('editorActionListForeground', \"Action List foreground color.\"));\nexport const editorActionListFocusForeground = registerColor('editorActionList.focusForeground', listActiveSelectionForeground, nls.localize('editorActionListFocusForeground', \"Action List foreground color for the focused item.\"));\nexport const editorActionListFocusBackground = registerColor('editorActionList.focusBackground', listActiveSelectionBackground, nls.localize('editorActionListFocusBackground', \"Action List background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { selectForeground, selectBackground } from './inputColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground } from './listColors.js';\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', selectForeground, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', selectBackground, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', listActiveSelectionForeground, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', listActiveSelectionBackground, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, oneOf } from '../colorUtils.js';\n// Import the colors we need\nimport { editorWidgetBackground, editorWidgetForeground } from './editorColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground } from './listColors.js';\nexport const quickInputBackground = registerColor('quickInput.background', editorWidgetBackground, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', editorWidgetForeground, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', null, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', listActiveSelectionForeground, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', listActiveSelectionIconForeground, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground } from './baseColors.js';\nimport { editorFindMatchHighlight, editorFindMatchHighlightBorder } from './editorColors.js';\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n// ----- search editor (Distinct from normal editor find match to allow for better differentiation)\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n"],"names":["ColorScheme","isHighContrast","scheme","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","isDark","DARK","IThemeService","themeColorFromId","id","getThemeTypeSelector","type","Extensions","ThemingContribution","themingRegistry","constructor","this","themingParticipants","onThemingParticipantAddedEmitter","onColorThemeChange","participant","push","fire","idx","indexOf","splice","getThemingParticipants","registerThemingParticipant","add","Themable","themeService","super","theme","getColorTheme","_register","onDidColorThemeChange","onThemeChange","updateStyles","asCssVariableName","colorIdent","replace","asCssVariable","color","asCssVariableWithDefault","defaultCssValue","ColorContribution","colorRegistry","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","pattern","patternErrorMessage","oneOf","const","getColors","Object","keys","map","resolveDefaultColor","colorDesc","resolveColorValue","value","getColorSchema","toString","sort","a","b","cat1","cat2","localeCompare","k","join","darken","colorValue","factor","op","lighten","transparent","colorValues","values","ifDefinedThenElse","ifArg","thenArg","elseArg","if","then","else","lessProminent","backgroundColorValue","transparency","background","fromHex","getColor","transform","backgroundColor","makeOpaque","candidate","defines","from","isDarkerThan","getLighterColor","getDarkerColor","executeTransform","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule","editorLineHighlight","editorLineHighlightBorder","dark","light","hcDark","hcLight","editorCursorForeground","black","white","editorCursorBackground","editorMultiCursorPrimaryForeground","editorMultiCursorPrimaryBackground","editorMultiCursorSecondaryForeground","editorMultiCursorSecondaryBackground","editorWhitespaces","editorLineNumbers","deprecatedEditorIndentGuides","deprecatedEditorActiveIndentGuides","editorIndentGuide1","editorIndentGuide2","editorIndentGuide3","editorIndentGuide4","editorIndentGuide5","editorIndentGuide6","editorActiveIndentGuide1","editorActiveIndentGuide2","editorActiveIndentGuide3","editorActiveIndentGuide4","editorActiveIndentGuide5","editorActiveIndentGuide6","deprecatedEditorActiveLineNumber","editorDimmedLineNumber","editorOverviewRulerBorder","lightgrey","editorOverviewRulerBackground","editorUnnecessaryCodeOpacity","ghostTextForeground","rulerRangeDefault","overviewRulerRangeHighlight","overviewRulerError","overviewRulerWarning","overviewRulerInfo","editorBracketHighlightingForeground1","editorBracketHighlightingForeground2","editorBracketHighlightingForeground3","editorBracketHighlightingForeground4","editorBracketHighlightingForeground5","editorBracketHighlightingForeground6","editorBracketHighlightingUnexpectedBracketForeground","editorBracketPairGuideBackground1","editorBracketPairGuideBackground2","editorBracketPairGuideBackground3","editorBracketPairGuideBackground4","editorBracketPairGuideBackground5","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground1","editorBracketPairGuideActiveBackground2","editorBracketPairGuideActiveBackground3","editorBracketPairGuideActiveBackground4","editorBracketPairGuideActiveBackground5","editorBracketPairGuideActiveBackground6","collector","lineHighlight","imeBackground","isTransparent","addRule","foreground","nls","iconForeground","focusBorder","contrastBorder","activeContrastBorder","textLinkForeground","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorBackground","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoForeground","editorInfoBorder","editorHintForeground","editorActiveLinkForeground","blue","cyan","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","editorFindMatchForeground","editorFindMatchHighlight","editorFindMatchHighlightForeground","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverBackground","editorHoverBorder","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffOverviewRulerInserted","diffOverviewRulerRemoved","widgetShadow","widgetBorder","toolbarHoverBackground","breadcrumbsForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","currentBaseColor","incomingBaseColor","commonBaseColor","mergeCurrentHeaderBackground","mergeIncomingHeaderBackground","mergeCommonHeaderBackground","mergeBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapInfo","minimapWarning","minimapError","minimapBackground","minimapForegroundOpacity","inputBackground","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionHoverBackground","inputActiveOptionBackground","inputActiveOptionForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectListBackground","selectForeground","selectBorder","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","radioActiveForeground","radioActiveBackground","radioActiveBorder","radioInactiveForeground","radioInactiveBackground","radioInactiveBorder","radioInactiveHoverBackground","checkboxBackground","checkboxForeground","checkboxBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","listFocusBackground","listFocusForeground","listFocusOutline","listFocusAndSelectionOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropOverBackground","listDropBetweenBackground","listHighlightForeground","listFocusHighlightForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","_deprecatedQuickInputListFocusBackground","undefined","quickInputListFocusForeground","quickInputListFocusIconForeground","quickInputListFocusBackground"],"sourceRoot":""}