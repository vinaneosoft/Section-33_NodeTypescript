{"version":3,"file":"5281.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-graphql/esm/workerManager.js","webpack://ruru/../../node_modules/monaco-graphql/esm/languageFeatures.js","webpack://ruru/../../node_modules/monaco-graphql/esm/graphqlMode.js"],"sourcesContent":["import { editor } from './monaco-editor';\nimport { getStringSchema } from './utils';\nconst STOP_WHEN_IDLE_FOR = 2 * 60 * 1000;\nexport class WorkerManager {\n    _defaults;\n    _idleCheckInterval;\n    _lastUsedTime = 0;\n    _configChangeListener;\n    _worker = null;\n    _client = null;\n    constructor(defaults) {\n        this._defaults = defaults;\n        this._idleCheckInterval = window.setInterval(() => this._checkIfIdle(), 30 * 1000);\n        this._configChangeListener = this._defaults.onDidChange(() => {\n            this._stopWorker();\n        });\n    }\n    _stopWorker() {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    }\n    dispose() {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    }\n    _checkIfIdle() {\n        if (!this._worker) {\n            return;\n        }\n        const timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    }\n    async _getClient() {\n        this._lastUsedTime = Date.now();\n        if (!this._client && !this._worker) {\n            try {\n                const { languageId, formattingOptions, schemas, externalFragmentDefinitions, completionSettings, } = this._defaults;\n                this._worker = editor.createWebWorker({\n                    moduleId: 'monaco-graphql/esm/GraphQLWorker.js',\n                    label: languageId,\n                    createData: {\n                        languageId,\n                        formattingOptions,\n                        languageConfig: {\n                            schemas: schemas?.map(getStringSchema),\n                            externalFragmentDefinitions,\n                            fillLeafsOnComplete: completionSettings.__experimental__fillLeafsOnComplete,\n                        },\n                    },\n                });\n                this._client = this._worker.getProxy();\n            }\n            catch (error) {\n                console.error('error loading worker', error);\n            }\n        }\n        return this._client;\n    }\n    async getLanguageServiceWorker(...resources) {\n        const client = await this._getClient();\n        await this._worker.withSyncedResources(resources);\n        return client;\n    }\n}\n//# sourceMappingURL=workerManager.js.map","import { Uri, languages } from './monaco-editor';\nimport { editor } from 'monaco-editor/esm/vs/editor/editor.api';\nimport { CompletionItemKind as lsCompletionItemKind } from 'graphql-language-service';\nimport { getModelLanguageId } from './utils';\nexport class DiagnosticsAdapter {\n    defaults;\n    _worker;\n    _disposables = [];\n    _listener = Object.create(null);\n    constructor(defaults, _worker) {\n        this.defaults = defaults;\n        this._worker = _worker;\n        this._worker = _worker;\n        let onChangeTimeout;\n        const onModelAdd = (model) => {\n            const modeId = getModelLanguageId(model);\n            if (modeId !== this.defaults.languageId) {\n                return;\n            }\n            const modelUri = model.uri.toString();\n            const jsonValidationForModel = defaults.diagnosticSettings.validateVariablesJSON?.[modelUri];\n            onChangeTimeout = setTimeout(() => {\n                void this._doValidate(model.uri, modeId, jsonValidationForModel);\n            }, 400);\n            this._listener[modelUri] = model.onDidChangeContent(() => {\n                clearTimeout(onChangeTimeout);\n                onChangeTimeout = setTimeout(() => {\n                    void this._doValidate(model.uri, modeId, jsonValidationForModel);\n                }, 400);\n            });\n        };\n        const onModelRemoved = (model) => {\n            editor.setModelMarkers(model, this.defaults.languageId, []);\n            const uriStr = model.uri.toString();\n            const listener = this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete this._listener[uriStr];\n            }\n        };\n        this._disposables.push(editor.onDidCreateModel(onModelAdd), {\n            dispose() {\n                clearTimeout(onChangeTimeout);\n            },\n        }, editor.onWillDisposeModel(model => {\n            onModelRemoved(model);\n        }), editor.onDidChangeModelLanguage(event => {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n        }), {\n            dispose: () => {\n                for (const listener of Object.values(this._listener)) {\n                    listener.dispose();\n                }\n            },\n        }, defaults.onDidChange(() => {\n            for (const model of editor.getModels()) {\n                if (getModelLanguageId(model) === this.defaults.languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            }\n        }));\n        for (const model of editor.getModels()) {\n            if (getModelLanguageId(model) === this.defaults.languageId) {\n                onModelAdd(model);\n            }\n        }\n    }\n    dispose() {\n        for (const disposable of this._disposables) {\n            disposable.dispose();\n        }\n        this._disposables = [];\n    }\n    async _doValidate(resource, languageId, variablesUris) {\n        const worker = await this._worker(resource);\n        if (!worker) {\n            return;\n        }\n        const diagnostics = await worker.doValidation(resource.toString());\n        editor.setModelMarkers(editor.getModel(resource), languageId, diagnostics);\n        if (variablesUris) {\n            await import('monaco-editor/esm/vs/language/json/monaco.contribution.js');\n            if (!variablesUris.length) {\n                throw new Error('No variables URI strings provided to validate');\n            }\n            const jsonSchema = await worker.doGetVariablesJSONSchema(resource.toString());\n            if (!jsonSchema) {\n                return;\n            }\n            const schemaUri = Uri.file(variablesUris[0].replace('.json', '-schema.json')).toString();\n            const configResult = {\n                uri: schemaUri,\n                schema: jsonSchema,\n                fileMatch: variablesUris,\n            };\n            const currentSchemas = languages.json.jsonDefaults.diagnosticsOptions.schemas?.filter(s => s.uri !== schemaUri) || [];\n            languages.json.jsonDefaults.setDiagnosticsOptions({\n                schemaValidation: 'error',\n                validate: true,\n                ...this.defaults.diagnosticSettings.jsonDiagnosticSettings,\n                schemas: [...currentSchemas, configResult],\n                enableSchemaRequest: false,\n            });\n        }\n    }\n}\nconst mKind = languages.CompletionItemKind;\nconst kindMap = {\n    [lsCompletionItemKind.Text]: mKind.Text,\n    [lsCompletionItemKind.Method]: mKind.Method,\n    [lsCompletionItemKind.Function]: mKind.Function,\n    [lsCompletionItemKind.Constructor]: mKind.Constructor,\n    [lsCompletionItemKind.Field]: mKind.Field,\n    [lsCompletionItemKind.Variable]: mKind.Variable,\n    [lsCompletionItemKind.Class]: mKind.Class,\n    [lsCompletionItemKind.Interface]: mKind.Interface,\n    [lsCompletionItemKind.Module]: mKind.Module,\n    [lsCompletionItemKind.Property]: mKind.Property,\n    [lsCompletionItemKind.Unit]: mKind.Unit,\n    [lsCompletionItemKind.Value]: mKind.Value,\n    [lsCompletionItemKind.Enum]: mKind.Enum,\n    [lsCompletionItemKind.Keyword]: mKind.Keyword,\n    [lsCompletionItemKind.Snippet]: mKind.Snippet,\n    [lsCompletionItemKind.Color]: mKind.Color,\n    [lsCompletionItemKind.File]: mKind.File,\n    [lsCompletionItemKind.Reference]: mKind.Reference,\n    [lsCompletionItemKind.Folder]: mKind.Folder,\n    [lsCompletionItemKind.EnumMember]: mKind.EnumMember,\n    [lsCompletionItemKind.Constant]: mKind.Constant,\n    [lsCompletionItemKind.Struct]: mKind.Struct,\n    [lsCompletionItemKind.Event]: mKind.Event,\n    [lsCompletionItemKind.Operator]: mKind.Operator,\n    [lsCompletionItemKind.TypeParameter]: mKind.TypeParameter,\n};\nexport function toCompletionItemKind(kind) {\n    return kind in kindMap ? kindMap[kind] : mKind.Text;\n}\nexport function toCompletion(entry) {\n    const suggestions = {\n        range: entry.range,\n        kind: toCompletionItemKind(entry.kind),\n        label: entry.label,\n        insertText: entry.insertText ?? entry.label,\n        insertTextRules: entry.insertText\n            ? languages.CompletionItemInsertTextRule.InsertAsSnippet\n            : undefined,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        command: entry.command,\n    };\n    return suggestions;\n}\nexport class CompletionAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n        this._worker = _worker;\n    }\n    get triggerCharacters() {\n        return [':', '$', ' ', '(', '@'];\n    }\n    async provideCompletionItems(model, position, _context, _token) {\n        try {\n            const worker = await this._worker(model.uri);\n            const completionItems = await worker.doComplete(model.uri.toString(), position);\n            return {\n                incomplete: true,\n                suggestions: completionItems.map(toCompletion),\n            };\n        }\n        catch (err) {\n            console.error('Error fetching completion items', err);\n            return { suggestions: [] };\n        }\n    }\n}\nexport class DocumentFormattingAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n        this._worker = _worker;\n    }\n    async provideDocumentFormattingEdits(document, _options, _token) {\n        const worker = await this._worker(document.uri);\n        const formatted = await worker.doFormat(document.uri.toString());\n        if (!formatted) {\n            return [];\n        }\n        return [\n            {\n                range: document.getFullModelRange(),\n                text: formatted,\n            },\n        ];\n    }\n}\nexport class HoverAdapter {\n    _worker;\n    constructor(_worker) {\n        this._worker = _worker;\n    }\n    async provideHover(model, position, _token) {\n        const resource = model.uri;\n        const worker = await this._worker(model.uri);\n        const hoverItem = await worker.doHover(resource.toString(), position);\n        if (hoverItem) {\n            return {\n                range: hoverItem.range,\n                contents: [{ value: hoverItem.content }],\n            };\n        }\n        return {\n            contents: [],\n        };\n    }\n    dispose() { }\n}\n//# sourceMappingURL=languageFeatures.js.map","import { languages } from './monaco-editor';\nimport { WorkerManager } from './workerManager';\nimport * as languageFeatures from './languageFeatures';\nexport function setupMode(defaults) {\n    const disposables = [];\n    const providers = [];\n    const client = new WorkerManager(defaults);\n    disposables.push(client);\n    const worker = (...uris) => {\n        try {\n            return client.getLanguageServiceWorker(...uris);\n        }\n        catch {\n            throw new Error('Error fetching graphql language service worker');\n        }\n    };\n    function registerSchemaLessProviders() {\n        const { modeConfiguration, languageId } = defaults;\n        if (modeConfiguration.documentFormattingEdits) {\n            providers.push(languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingAdapter(worker)));\n        }\n    }\n    function registerAllProviders(api) {\n        const { modeConfiguration, languageId } = defaults;\n        disposeAll(providers);\n        if (modeConfiguration.completionItems) {\n            providers.push(languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n        }\n        if (modeConfiguration.diagnostics) {\n            providers.push(new languageFeatures.DiagnosticsAdapter(api, worker));\n        }\n        if (modeConfiguration.hovers) {\n            providers.push(languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n        }\n        registerSchemaLessProviders();\n    }\n    let { modeConfiguration, formattingOptions, diagnosticSettings, externalFragmentDefinitions, schemas, } = defaults;\n    registerAllProviders(defaults);\n    defaults.onDidChange(newDefaults => {\n        if (newDefaults.modeConfiguration !== modeConfiguration) {\n            modeConfiguration = newDefaults.modeConfiguration;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.formattingOptions !== formattingOptions) {\n            formattingOptions = newDefaults.formattingOptions;\n            registerSchemaLessProviders();\n        }\n        if (newDefaults.externalFragmentDefinitions !== externalFragmentDefinitions) {\n            externalFragmentDefinitions = newDefaults.externalFragmentDefinitions;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.diagnosticSettings !== diagnosticSettings) {\n            diagnosticSettings = newDefaults.diagnosticSettings;\n            registerAllProviders(newDefaults);\n        }\n        if (newDefaults.schemas !== schemas) {\n            schemas = newDefaults.schemas;\n            registerAllProviders(newDefaults);\n        }\n    });\n    disposables.push(asDisposable(providers));\n    return asDisposable(disposables);\n}\nfunction asDisposable(disposables) {\n    return { dispose: () => disposeAll(disposables) };\n}\nfunction disposeAll(disposables) {\n    while (disposables.length) {\n        disposables.pop().dispose();\n    }\n}\n//# sourceMappingURL=graphqlMode.js.map"],"names":["WorkerManager","_defaults","_idleCheckInterval","_lastUsedTime","_configChangeListener","_worker","_client","constructor","defaults","this","window","setInterval","_checkIfIdle","onDidChange","_stopWorker","dispose","clearInterval","Date","now","_getClient","languageId","formattingOptions","schemas","externalFragmentDefinitions","completionSettings","createWebWorker","moduleId","label","createData","languageConfig","map","fillLeafsOnComplete","__experimental__fillLeafsOnComplete","getProxy","error","console","getLanguageServiceWorker","resources","client","withSyncedResources","DiagnosticsAdapter","_disposables","_listener","Object","create","onChangeTimeout","onModelAdd","model","modeId","modelUri","uri","toString","jsonValidationForModel","diagnosticSettings","validateVariablesJSON","setTimeout","_doValidate","onDidChangeContent","clearTimeout","onModelRemoved","editor","setModelMarkers","uriStr","listener","push","onDidCreateModel","onWillDisposeModel","onDidChangeModelLanguage","event","values","getModels","disposable","resource","variablesUris","worker","diagnostics","doValidation","getModel","length","Error","jsonSchema","doGetVariablesJSONSchema","schemaUri","file","replace","configResult","schema","fileMatch","currentSchemas","json","jsonDefaults","diagnosticsOptions","filter","s","setDiagnosticsOptions","schemaValidation","validate","jsonDiagnosticSettings","enableSchemaRequest","mKind","CompletionItemKind","kindMap","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","toCompletion","entry","kind","range","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","undefined","sortText","filterText","documentation","detail","command","CompletionAdapter","triggerCharacters","provideCompletionItems","position","_context","_token","incomplete","suggestions","doComplete","err","DocumentFormattingAdapter","provideDocumentFormattingEdits","document","_options","formatted","doFormat","getFullModelRange","text","HoverAdapter","provideHover","hoverItem","doHover","contents","value","content","setupMode","disposables","providers","uris","registerSchemaLessProviders","modeConfiguration","documentFormattingEdits","registerDocumentFormattingEditProvider","registerAllProviders","api","disposeAll","completionItems","registerCompletionItemProvider","hovers","registerHoverProvider","newDefaults","asDisposable","pop"],"sourceRoot":""}