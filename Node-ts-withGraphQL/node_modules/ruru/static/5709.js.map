{"version":3,"file":"5709.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n"],"names":["registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","warnOnOverwrite","userConfigured","associationItem","id","mime","filename","extension","filepattern","firstline","filenameLowercase","toLowerCase","undefined","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","toLanguageAssociationItem","push","forEach","a","console","warn","_registerLanguageAssociation","clearPlatformLanguageAssociations","filter","getLanguageIds","resource","firstLine","path","scheme","file","fsPath","data","parseMetaData","get","META_DATA_LABEL","vscodeNotebookCell","unknown","configuredLanguage","getAssociationByPath","text","registeredLanguage","firstlineLanguage","substr","length","i","matches","match","getAssociationByFirstline","getAssociations","map","item","associations","filenameMatch","patternMatch","extensionMatch","target","endsWith"],"sourceRoot":""}