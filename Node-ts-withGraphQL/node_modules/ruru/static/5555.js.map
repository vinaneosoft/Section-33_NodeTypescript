{"version":3,"file":"5555.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/files/common/files.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/themables.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\nexport function getIconClasses(modelService, languageService, resource, fileKind, icon) {\n    if (ThemeIcon.isThemeIcon(icon)) {\n        return [`codicon-${icon.id}`, 'predefined-file-icon'];\n    }\n    if (URI.isUri(icon)) {\n        return [];\n    }\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            const match = resource.path.match(fileIconDirectoryRegex);\n            if (match) {\n                name = cssEscape(match[2].toLowerCase());\n                if (match[1]) {\n                    classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n                }\n            }\n            else {\n                name = cssEscape(resource.authority.toLowerCase());\n            }\n        }\n        // Root Folders\n        if (fileKind === FileKind.ROOT_FOLDER) {\n            classes.push(`${name}-root-name-folder-icon`);\n        }\n        // Folders\n        else if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                classes.push(`name-file-icon`); // extra segment to increase file-name score\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nfunction cssEscape(str) {\n    return str.replace(/[\\s]/g, '/'); // HTML class names can not contain certain whitespace characters (https://dom.spec.whatwg.org/#interface-domtokenlist), use / instead, which doesn't exist in file names.\n}\n","//#endregion\n//#region Utilities\nexport var FileKind;\n(function (FileKind) {\n    FileKind[FileKind[\"FILE\"] = 0] = \"FILE\";\n    FileKind[FileKind[\"FOLDER\"] = 1] = \"FOLDER\";\n    FileKind[FileKind[\"ROOT_FOLDER\"] = 2] = \"ROOT_FOLDER\";\n})(FileKind || (FileKind = {}));\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from './codicons.js';\nexport var ThemeColor;\n(function (ThemeColor) {\n    function isThemeColor(obj) {\n        return obj && typeof obj === 'object' && typeof obj.id === 'string';\n    }\n    ThemeColor.isThemeColor = isThemeColor;\n})(ThemeColor || (ThemeColor = {}));\nexport var ThemeIcon;\n(function (ThemeIcon) {\n    ThemeIcon.iconNameSegment = '[A-Za-z0-9]+';\n    ThemeIcon.iconNameExpression = '[A-Za-z0-9-]+';\n    ThemeIcon.iconModifierExpression = '~[A-Za-z]+';\n    ThemeIcon.iconNameCharacter = '[A-Za-z0-9~-]';\n    const ThemeIconIdRegex = new RegExp(`^(${ThemeIcon.iconNameExpression})(${ThemeIcon.iconModifierExpression})?$`);\n    function asClassNameArray(icon) {\n        const match = ThemeIconIdRegex.exec(icon.id);\n        if (!match) {\n            return asClassNameArray(Codicon.error);\n        }\n        const [, id, modifier] = match;\n        const classNames = ['codicon', 'codicon-' + id];\n        if (modifier) {\n            classNames.push('codicon-modifier-' + modifier.substring(1));\n        }\n        return classNames;\n    }\n    ThemeIcon.asClassNameArray = asClassNameArray;\n    function asClassName(icon) {\n        return asClassNameArray(icon).join(' ');\n    }\n    ThemeIcon.asClassName = asClassName;\n    function asCSSSelector(icon) {\n        return '.' + asClassNameArray(icon).join('.');\n    }\n    ThemeIcon.asCSSSelector = asCSSSelector;\n    function isThemeIcon(obj) {\n        return obj && typeof obj === 'object' && typeof obj.id === 'string' && (typeof obj.color === 'undefined' || ThemeColor.isThemeColor(obj.color));\n    }\n    ThemeIcon.isThemeIcon = isThemeIcon;\n    const _regexFromString = new RegExp(`^\\\\$\\\\((${ThemeIcon.iconNameExpression}(?:${ThemeIcon.iconModifierExpression})?)\\\\)$`);\n    function fromString(str) {\n        const match = _regexFromString.exec(str);\n        if (!match) {\n            return undefined;\n        }\n        const [, name] = match;\n        return { id: name };\n    }\n    ThemeIcon.fromString = fromString;\n    function fromId(id) {\n        return { id };\n    }\n    ThemeIcon.fromId = fromId;\n    function modify(icon, modifier) {\n        let id = icon.id;\n        const tildeIndex = id.lastIndexOf('~');\n        if (tildeIndex !== -1) {\n            id = id.substring(0, tildeIndex);\n        }\n        if (modifier) {\n            id = `${id}~${modifier}`;\n        }\n        return { id };\n    }\n    ThemeIcon.modify = modify;\n    function getModifier(icon) {\n        const tildeIndex = icon.id.lastIndexOf('~');\n        if (tildeIndex !== -1) {\n            return icon.id.substring(tildeIndex + 1);\n        }\n        return undefined;\n    }\n    ThemeIcon.getModifier = getModifier;\n    function isEqual(ti1, ti2) {\n        return ti1.id === ti2.id && ti1.color?.id === ti2.color?.id;\n    }\n    ThemeIcon.isEqual = isEqual;\n})(ThemeIcon || (ThemeIcon = {}));\n"],"names":["fileIconDirectoryRegex","getIconClasses","modelService","languageService","resource","fileKind","icon","isThemeIcon","id","isUri","classes","ROOT_FOLDER","FOLDER","name","scheme","data","parseMetaData","get","META_DATA_LABEL","match","path","cssEscape","toLowerCase","push","authority","length","dotSegments","split","i","slice","join","detectedLanguageId","languageId","mime","META_DATA_MIME","getLanguageIdByMimeType","model","getModel","getLanguageId","guessLanguageIdByFilepathOrFirstLine","detectLanguageId","str","replace","FileKind","ThemeColor","ThemeIcon","isThemeColor","obj","iconNameSegment","iconNameExpression","iconModifierExpression","iconNameCharacter","ThemeIconIdRegex","RegExp","asClassNameArray","exec","error","modifier","classNames","substring","asClassName","asCSSSelector","color","_regexFromString","fromString","fromId","modify","tildeIndex","lastIndexOf","getModifier","isEqual","ti1","ti2"],"sourceRoot":""}