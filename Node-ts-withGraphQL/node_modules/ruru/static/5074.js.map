{"version":3,"file":"5074.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\n"],"names":["registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","warnOnOverwrite","userConfigured","associationItem","id","mime","filename","extension","filepattern","firstline","filenameLowercase","toLowerCase","undefined","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","toLanguageAssociationItem","push","forEach","a","console","warn","_registerLanguageAssociation","clearPlatformLanguageAssociations","filter","getLanguageIds","resource","firstLine","path","scheme","file","fsPath","data","parseMetaData","get","META_DATA_LABEL","vscodeNotebookCell","unknown","configuredLanguage","getAssociationByPath","text","registeredLanguage","firstlineLanguage","substr","length","i","matches","match","getAssociationByFirstline","getAssociations","map","item","associations","filenameMatch","patternMatch","extensionMatch","target","endsWith","hasOwnProperty","Object","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","constructor","this","_languageIdToLanguage","_languageToLanguageId","Map","_register","_nextLanguageId","language","languageId","set","register","has","encodeLanguageId","decodeLanguageId","LanguagesRegistry","instanceCount","useModesRegistry","super","_onDidChange","onDidChange","event","_warnOnOverwrite","languageIdCodec","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","onDidChangeLanguages","m","dispose","desc","concat","getLanguages","_registerLanguages","d","_registerLanguage","keys","langId","name","identifier","aliases","alias","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","fire","lang","resolvedLanguage","call","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","Array","isArray","configuration","filenamePatterns","filenamePattern","firstLineRegexStr","charAt","firstLineRegex","RegExp","err","langAliases","langAlias","containsAliases","bestName","icon","isRegisteredLanguageId","getLanguageIdByLanguageName","languageName","languageNameLower","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine"],"sourceRoot":""}